/* Урок 2. Основные операторы JavaScript */
/* 1. Дан код:
var a = 1, b = 1, c, d;
c = ++a; alert(c);           // 2
+ Результат инкремента a (a += 1) записывается в переменную c. Выводится значение переменной c.
d = b++; alert(d);           // 1
+ Значение переменной b записывается в d, после чего b увеличивается на единицу. Выводится d.
c = (2+ ++a); alert(c);      // 5
+ В переменную c записывается сумма 2 и a. Перед сложением a увеличивается на единицу.
d = (2+ b++); alert(d);      // 4
+ В переменную d записывается сумма 2 и b. После этого b увеличивается на единицу.
alert(a);                    // 3
alert(b);                    // 3
+ В предыдущих выражениях к переменным a и b дважды применялась операция инкремента.
Почему код даёт именно такие результаты? */
/* 2. Чему будет равен x в примере ниже?
var a = 2;
var x = 1 + (a *= 2);
+ 3. Сначала a умножается на 2, результат записывается в a, затем a прибавляется к 1. */
/* 3. Объявить две целочисленные переменные a и b и задать им произвольные начальные значения. Затем написать скрипт, который работает по следующему принципу:
если a и b положительные, вывести их разность;
если а и b отрицательные, вывести их произведение;
если а и b разных знаков, вывести их сумму; ноль можно считать положительным числом. */
//  var a = 5, b = 6
// if(a >= 0 && b >= 0)
//     alert(a - b)
// else if(a < 0 && b < 0)
//     alert(a * b)
// else
//     alert(a + b)
/* + В данном случае результат будет -1 */
/* 4. Присвоить переменной а значение в промежутке [0..15]. С помощью оператора switch организовать вывод чисел от a до 15. */
var a = 5, r = ""
switch(a) {
    case 0: r += ` 0`
    case 1: r += ` 1`
    case 2: r += ` 2`
    case 3: r += ` 3`
    case 4: r += ` 4`
    case 5: r += ` 5`
    case 6: r += ` 6`
    case 7: r += ` 7`
    case 8: r += ` 8`
    case 9: r += ` 9`
    case 10: r += ` 10`
    case 11: r += ` 11`
    case 12: r += ` 12`
    case 13: r += ` 13`
    case 14: r += ` 14`
    case 15: r += ` 15`
}
alert(r)
/* Поскольку break не проставлялось, оператор выполнил все команды, идущие после сработавшего case.  */
/* 5. Реализовать основные 4 арифметические операции в виде функций с двумя параметрами. Обязательно использовать оператор return. */

// function mySum(a, b) {return a + b}
// function myMul(a, b) {return a * b}
// function mySubt(a, b) {return a - b}
// function myDiv(a, b) {return a / b}

/* 6. Реализовать функцию с тремя параметрами: function mathOperation(arg1, arg2, operation), где arg1, arg2 – значения аргументов, operation – строка с названием операции. В зависимости от переданного значения операции выполнить одну из арифметических операций (использовать функции из пункта 5) и вернуть полученное значение (использовать switch). */

//     function mathOperation(arg1, arg2, operation) {
//         switch(operation) {
//             case "+":
//                 var r = mySum(arg1, arg2)
//                 break
//             case "-":
//                 var r = mySubt(arg1, arg2)
//                 break
//             case "*":
//                 var r = myMul(arg1, arg2)
//                 break
//             case "/":
//                 var r = myDiv(arg1, arg2)
//                 break
//             default: r = `Аргумент ${operation} некорректен`
//         }
//     return r
// }

// Также можно было бы в действиях case вместо r = ... прописать return my... В этом случае break было бы лишним.

// console.log(mathOperation(5, 6, '+'))
// console.log(mathOperation(7, 6, '-'))
// console.log(mathOperation(5, 6, '*'))
// console.log(mathOperation(30, 6, '/'))

/* 7. *Сравнить null и 0. Попробуйте объяснить результат. */

// false. А почему иначе? null - не является числом и не приводится к number.

/* 8. *С помощью рекурсии организовать функцию возведения числа в степень. Формат: function power(val, pow), где val – заданное число, pow – степень. */

function power(val, pow) {
    if(pow == 1) return val
    return val * power(val, pow - 1)
}

power(5, 4) // 625
