/* Урок 4. Объекты в JavaScript */
/* 1. Написать функцию, преобразующую число в объект. Передавая на вход число от 0 до 999, мы должны получить на выходе объект, в котором в соответствующих свойствах описаны единицы, десятки и сотни. Например, для числа 245 мы должны получить следующий объект: {‘единицы’: 5, ‘десятки’: 4, ‘сотни’: 2}. Если число превышает 999, необходимо выдать соответствующее сообщение с помощью console.log и вернуть пустой объект. */

/* 
function numberToObj(n) {
    if((n >= 1000) || (n < 0)) {
        console.log(`Число ${n} не может превышать 999 и быть отрицательным.`)
        return {}
    }
    const result = {units: 0, tens: 0, hundred: 0}
    var temp = 0
    if(n < 10) result.units = n
    else if(n < 100) {
        result.units = n % 10
        result.tens = Math.floor(n / 10)
    } else {
        result.units = n % 10
        temp = Math.floor(n / 10)
        result.tens = temp % 10
        result.hundred = Math.floor(temp / 10)
    }
    return result
}
console.log(numberToObj(-1))
 */

/* 2.Продолжить работу с интернет-магазином:
2.1. В прошлом домашнем задании вы реализовали корзину на базе массивов. Какими объектами можно заменить их элементы?
2.2. Реализуйте такие объекты.
2.3. Перенести функционал подсчета корзины на объектно-ориентированную базу. */

// Корзина
cart = {
    goods: [], // Массив товаров.
    addGood: function(good, count) { // метод добавления товара в корзину.
        this.goods.push([good, count])
    },
    cartValue: function() { // Подсчитываем полную стоимость корзины.
        var cv = 0
        for(g in this.goods) {
            cv += this.goods[g][0].price * this.goods[g][1]
        }
        return cv
    }
}

// Создаём объект товара. Содержит в себе Наименование, цену и единицу измерения.)
function crGood(name, price, unit) {
    return {'name':name, 'price':price, 'unit':unit}
}

// Наполняем корзину.
cart.addGood(crGood('Яблоки', 50, 'КГ'), 10)
cart.addGood(crGood('Груши', 70, 'КГ'), 5)
cart.addGood(crGood('Велосипед', 200, 'шт'), 1)

console.log(cart.cartValue()) // Подсчитываем стоимость добавленных товаров.

// В реальной корзине в goods, скорее всего помещались бы только артикул и количество товаров. Сами товары со всеми своими характеристиками помещались в каталог. Ну, может быть, ещё цена, чтобы лишний раз каталог не трогать.

/* 3.* Подумать над глобальными сущностями. К примеру, сущность «Продукт» в интернет-магазине актуальна не только для корзины, но и для каталога. Стремиться нужно к тому, чтобы объект «Продукт» имел единую структуру для различных модулей сайта, но в разных местах давал возможность вызывать разные методы. */
/* 
В моём понимании интернет-магазин должен содержать две основные сущности: пользователь и каталог. Это будут два основных объекта.
Пользователей будет два вида - продавец (seller) и покупатель (buyer). Будут ли они самостоятельными или унаследоваными от общего объекта user - вопрос удобства. В любом случае, оба они будут содержать базовую информацию о человеке (ФИО, адрес и т.п.) Каждый из них будет связан с определённым набором товаров (good). Но смысл этого набора в каждом случае будет разным.
У buyer это будет массив купленных товаров и корзина.
У seller - список проданных товаров, а также, ещё не проданных, но добавленных кем-то в корзину и закреплённых за конкретным продавцом.
Каталог (catalog) включает в себя массив товаров (goods), а также функции поиска и сортировки товаров.
Товар (good) включает в себя артикул, название, характеристики, цену и прочую существенную информацию. В том числе там будет набор категорий, к которым этот товар относится. Какие там могут быть методы - с ходу и не придумывается.
Buyer открывает каталог, который позволяет, посредством методов в объекте catalog искать нужный товар, сортировать по категориям и т.п. Отмечает нужные товары и добавляет их в корзину (ссылки на выбранные товары помещаются в массив buyer.cart.goots). Также эти ссылки помещаются в список непроданных товаров какому-нибудь seller.
Помимо метода подсчёта общей стоимости корзины, она будет содержать метод оформления заказа. После оформления заказа ссылки на купленные товары перемещаются в список купленных у покупателя и проданных у продавца товаров... 
Ну и так далее.
Большая часть функционала, кстати, скорее всего будет реализована отнюдь не на JS... Какая именно станет ясно, когда вы расскажете нам, как встраивать JS-скрипты на web-странички.
 */